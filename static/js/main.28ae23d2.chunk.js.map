{"version":3,"sources":["components/Cell.js","components/Field.js","App.js","index.js"],"names":["Cell","className","this","props","close","done","onClick","style","background","backgroundImage","Component","Field","initGame","state","cells","Init","Dupe","children","Rand","concat","shuffleCells","map","pair","push","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","renderCell","indexPair","indexArray","key","handleClick","renderField","field","i","rows","j","Open","currentCell","setState","shift","setTimeout","check","every","item","confirm","window","location","reload","Array","keys","App","ReactDOM","render","document","getElementById"],"mappings":"2SA2BeA,E,uKAvBH,IAAD,OACP,OACE,yBACEC,UAAW,oBAAiBC,KAAKC,MAAMC,MAAQ,GAAK,yBAA2BF,KAAKC,MAAME,KAAO,oBAAsB,IACvHC,QAAS,WACP,EAAKH,MAAMG,YAGb,yBAAKL,UAAU,mBAAmBM,MAAOL,KAAKC,MAAMC,MAAQ,GAAK,CAAEI,WAAYN,KAAKC,MAAMK,cAC1F,yBAAKP,UAAU,kBAAkBM,MAAO,CAAEE,gBAAiB,mC,GAVhDC,aC6KJC,E,kDA5Kb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IAmBRS,SAAW,WAAO,IAAD,EAC6C,EAAKC,MAA3DC,MAASC,EADA,EACAA,KAAMC,EADN,EACMA,KAAYC,GADlB,EACYC,KADZ,EACkBD,UAAUT,EAD5B,EAC4BA,WAE3CQ,EAAOD,EAAKI,OAAOJ,GACZ,EAAKK,aAAaJ,GAClBA,EAGFK,KAAI,SAACC,GACR,OAAOL,EAASM,KAAK,CACnBD,OACAlB,OAAO,EACPC,MAAM,EACNG,WAAYA,EAAWc,SAjCV,EAsCnBF,aAAe,SAACI,GAOd,IANA,IAEEC,EACAC,EAFAC,EAAeH,EAAMI,OAKhB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,GAvDU,EA8DnBQ,WAAa,SAACC,EAAWC,EAAY9B,EAAOC,EAAMG,GAChD,OACE,kBAAC,EAAD,CACEc,KAAMW,EACNE,IAAKD,EACL9B,MAAOA,EACPC,KAAMA,EACNG,WAAY,IAAMA,EAClBF,QAAS,kBAAM,EAAK8B,YAAYF,EAAYD,KAC5CA,IAvEa,EA2EnBI,YAAc,WAOZ,IALE,IAAWpB,EAAe,EAAKJ,MAA7BC,MAASG,SAEXqB,EAAQ,GAGDC,EAAI,EAAGA,EAJD,EAIiBA,IAAK,CAInC,IAHA,IAAIC,EAAO,GAGFC,EAAI,EAAGA,EAAIxB,EAASW,OAAQa,GARxB,EAUXD,EAAKjB,KAAK,yBAAKtB,UAAU,aAAakC,IAAG,cAASM,IAC/C,CAEC,EAAKT,WAAWf,EAASwB,GAAGnB,KAAMmB,EAAGxB,EAASwB,GAAGrC,MAAOa,EAASwB,GAAGpC,KAAMY,EAASwB,GAAGjC,YACtF,EAAKwB,WAAWf,EAASwB,EAAI,GAAGnB,KAAMmB,EAAI,EAAGxB,EAASwB,EAAI,GAAGrC,MAAOa,EAASwB,EAAI,GAAGpC,KAAMY,EAASwB,EAAI,GAAGjC,YAC1G,EAAKwB,WAAWf,EAASwB,EAAI,GAAGnB,KAAMmB,EAAI,EAAGxB,EAASwB,EAAI,GAAGrC,MAAOa,EAASwB,EAAI,GAAGpC,KAAMY,EAASwB,EAAI,GAAGjC,YAC1G,EAAKwB,WAAWf,EAASwB,EAAI,GAAGnB,KAAMmB,EAAI,EAAGxB,EAASwB,EAAI,GAAGrC,MAAOa,EAASwB,EAAI,GAAGpC,KAAMY,EAASwB,EAAI,GAAGjC,eAShH,OAHA8B,EAAMf,KAAK,yBAAKtB,UAAU,QAAQkC,IAAG,gBAAWI,IAAMC,IAG/CF,IAvGQ,EA2GnBF,YAAc,SAACF,EAAYD,GAAe,IAAD,EAEL,EAAKpB,MAAnCC,MAAS4B,EAF0B,EAE1BA,KAAMzB,EAFoB,EAEpBA,SACjB0B,EAAc,CAAEV,YAAWC,cAGP,IAAhBQ,EAAKd,UACJX,EAASiB,GAAY7B,MAAQY,EAASiB,GAAY9B,QACrDa,EAASiB,GAAY9B,OAAQ,EAC7BsC,EAAKnB,KAAKoB,IAGZ,EAAKC,SAAS,CACZ9B,MAAM,eACD,EAAKD,MAAMC,MADX,CAEHG,SAAUA,MAIVyB,GAAyB,IAAhBA,EAAKd,SACZc,EAAK,GAAGR,aAAeQ,EAAK,GAAGR,WACjCQ,EAAKG,QAELC,YAAW,kBAAM,EAAKC,UAAS,QAlIpB,EAwInBA,MAAQ,WAAO,IAAD,EAC0B,EAAKlC,MAAnCC,MAAS4B,EADL,EACKA,KAAMzB,EADX,EACWA,UAEnByB,EAAK,IAAMA,EAAK,KACdA,EAAK,GAAGT,YAAcS,EAAK,GAAGT,WAChChB,EAASyB,EAAK,GAAGR,YAAY7B,MAAO,EACpCY,EAASyB,EAAK,GAAGR,YAAY7B,MAAO,IAEpCY,EAASyB,EAAK,GAAGR,YAAY9B,OAAQ,EACrCa,EAASyB,EAAK,GAAGR,YAAY9B,OAAQ,IAIzC,EAAKwC,SAAS,CACZ9B,MAAM,eACD,EAAKD,MAAMC,MADX,CAEH4B,KAAM,OAIIzB,EAAS+B,OAAM,SAACC,GAAD,OAAUA,EAAK5C,WAIhC6C,QAAQ,qCAEhBC,OAAOC,SAASC,WA/JpB,EAAKxC,MAAQ,CACXC,MAAO,CACLC,KAAK,YAAKuC,MAAM,GAAGC,QACnBvC,KAAM,GACNE,KAAM,GAENwB,KAAM,GAENzB,SAAU,GAEVT,WAAY,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,YAIvF,EAAKI,WAjBY,E,qDAwKjB,OAAOV,KAAKmC,kB,GAzKI3B,aCUL8C,E,uKARX,OACE,yBAAKvD,UAAU,QACb,kBAAC,EAAD,W,GAJUS,aCQlB+C,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.28ae23d2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Cell extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={'Field__сell' + (this.props.close ? '' : ' Field__cell_flipped') + (this.props.done ? ' Field__cell_done' : '')}\r\n        onClick={() => {\r\n          this.props.onClick()\r\n        }}\r\n      >\r\n        <div className='Cell__front-side' style={this.props.close ? {} : { background: this.props.background}}></div>\r\n        <div className='Cell__back-side' style={{ backgroundImage: 'url(react-back-logo.png)' }}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nCell.propTypes = {\r\n  onClick: PropTypes.func,\r\n  pair: PropTypes.number.isRequired,\r\n  close: PropTypes.bool.isRequired,\r\n  done: PropTypes.bool.isRequired,\r\n  background: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Cell","import React, { Component } from 'react'\r\nimport Cell from './Cell'\r\n\r\nclass Field extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      cells: {\r\n        Init: [...Array(8).keys()],\r\n        Dupe: [],\r\n        Rand: [],\r\n\r\n        Open: [],\r\n\r\n        children: [],\r\n\r\n        background: ['bf392b', '9b59b6', '2980b9', '119479', '7ef4b0', 'f1c40f', 'ffffff', '000000']\r\n      },\r\n    }\r\n\r\n    this.initGame()\r\n  }\r\n\r\n  initGame = () => {\r\n    let { cells: { Init, Dupe, Rand, children, background } } = this.state\r\n\r\n    Dupe = Init.concat(Init) // Duplicating inited array (for pairs)\r\n    Rand = this.shuffleCells(Dupe) // Randomizing it by shuffleCells func\r\n    Rand = Dupe\r\n\r\n    // Putting default info in each child of already randomized cells\r\n    Rand.map((pair) => {\r\n      return children.push({\r\n        pair,\r\n        close: true,\r\n        done: false,\r\n        background: background[pair]\r\n      })\r\n    })\r\n  }\r\n\r\n  shuffleCells = (array) => {\r\n    let\r\n      currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex)\r\n      currentIndex -= 1\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex]\r\n      array[currentIndex] = array[randomIndex]\r\n      array[randomIndex] = temporaryValue\r\n    }\r\n    return array\r\n  }\r\n\r\n  /*\r\n   * There are cannot be default values of close and done vars\r\n   * Because every cell will work wrong\r\n   */\r\n  renderCell = (indexPair, indexArray, close, done, background) => {\r\n    return (\r\n      <Cell\r\n        pair={indexPair}\r\n        key={indexArray}\r\n        close={close}\r\n        done={done}\r\n        background={'#' + background}\r\n        onClick={() => this.handleClick(indexArray, indexPair)}\r\n      >{indexPair}</Cell>\r\n    )\r\n  }\r\n\r\n  renderField = () => {\r\n    const\r\n      { cells: { children } } = this.state,\r\n      lineLength = 4, // Count of cells in 1 line\r\n      field = []\r\n\r\n    // Every line...\r\n    for (let i = 0; i < lineLength; i++) {\r\n      let rows = []\r\n\r\n      // Cells are created... \r\n      for (let j = 0; j < children.length; j += lineLength) {\r\n        // In their own row\r\n        rows.push(<div className='Field__row' key={`Row_${j}`}>\r\n          {[ // In count of 4\r\n            // FIXME: Automatically set count of renderCells in the row by lineLength\r\n            this.renderCell(children[j].pair, j, children[j].close, children[j].done, children[j].background),\r\n            this.renderCell(children[j + 1].pair, j + 1, children[j + 1].close, children[j + 1].done, children[j + 1].background),\r\n            this.renderCell(children[j + 2].pair, j + 2, children[j + 2].close, children[j + 2].done, children[j + 2].background),\r\n            this.renderCell(children[j + 3].pair, j + 3, children[j + 3].close, children[j + 3].done, children[j + 3].background),\r\n          ]}\r\n        </div>)\r\n      }\r\n\r\n      // Then all line with their cells pushed into Field (parent) \r\n      field.push(<div className='Field' key={`Field_${i}`}>{rows}</div>)\r\n\r\n      // Returned last updated and pushed status of field\r\n      return field\r\n    }\r\n  }\r\n\r\n  handleClick = (indexArray, indexPair) => {\r\n    const\r\n      { cells: { Open, children } } = this.state,\r\n      currentCell = { indexPair, indexArray }\r\n\r\n    // TODO: Add comments here and lower\r\n    if (!(Open.length === 2)) {\r\n      if (!children[indexArray].done && children[indexArray].close) {\r\n        children[indexArray].close = false\r\n        Open.push(currentCell)\r\n      }\r\n\r\n      this.setState({\r\n        cells: {\r\n          ...this.state.cells,\r\n          children: children,\r\n        }\r\n      })\r\n\r\n      if (Open && (Open.length === 2)) {\r\n        if (Open[0].indexArray === Open[1].indexArray) {\r\n          Open.shift()\r\n        } else {\r\n          setTimeout(() => this.check(), 1000)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  check = () => {\r\n    const { cells: { Open, children } } = this.state\r\n\r\n    if (Open[0] && Open[1]) {\r\n      if (Open[0].indexPair === Open[1].indexPair) {\r\n        children[Open[0].indexArray].done = true\r\n        children[Open[1].indexArray].done = true\r\n      } else {\r\n        children[Open[0].indexArray].close = true\r\n        children[Open[1].indexArray].close = true\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      cells: {\r\n        ...this.state.cells,\r\n        Open: []\r\n      }\r\n    })\r\n\r\n    const state = children.every((item) => item.done)\r\n\r\n    if (state) {\r\n      // eslint-disable-next-line no-restricted-globals\r\n      let ask = confirm('Do you want to restart the game?')\r\n      if (ask) {\r\n        window.location.reload()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.renderField()\r\n  }\r\n}\r\n\r\nexport default Field","import React, { Component } from 'react'\r\nimport Field from './components/Field'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='Game'>\r\n        <Field />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// eslint-disable-next-line no-unused-vars\nimport * as coreJs from 'core-js' // IE 10-11 fix\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'reset-css'\nimport './index.css'\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}